// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TownOfStettler.Data;

#nullable disable

namespace TownOfStettler.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20221020185606_seedDataInitial")]
    partial class seedDataInitial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("utf8mb4_general_ci")
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "utf8mb4");

            modelBuilder.Entity("TownOfStettler.Models.DeviceInformation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("ID");

                    b.Property<bool>("Destroyed")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("DeviceTypeId")
                        .HasColumnType("int(11)")
                        .HasColumnName("Device Type ID");

                    b.Property<string>("ModelNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Model Number");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<string>("OperatingSystem")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("Operating System");

                    b.Property<int>("OwnerLocation")
                        .HasColumnType("int(11)")
                        .HasColumnName("Owner/Location");

                    b.Property<string>("PowerSupply")
                        .HasMaxLength(75)
                        .HasColumnType("varchar(75)")
                        .HasColumnName("Power Supply");

                    b.Property<DateOnly>("PurchaseDate")
                        .HasColumnType("date")
                        .HasColumnName("Purchase Date");

                    b.Property<decimal>("PurchasePrice")
                        .HasPrecision(6, 2)
                        .HasColumnType("decimal(6,2)")
                        .HasColumnName("Purchase Price");

                    b.Property<string>("PurchaseStore")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("Purchase Store");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("Serial Number");

                    b.Property<string>("TosNumber")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("TOS Number");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "DeviceTypeId" }, "device information_ibfk_1");

                    b.HasIndex(new[] { "OwnerLocation" }, "device information_ibfk_2");

                    b.ToTable("device information", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Destroyed = false,
                            DeviceTypeId = 1,
                            ModelNumber = "NA",
                            Notes = "Dell Poweredge 840 Dual Core Xeon 2.13 Ghz",
                            OperatingSystem = "Windows 2003 Server - Standard",
                            OwnerLocation = 1,
                            PurchaseDate = new DateOnly(2007, 5, 1),
                            PurchasePrice = 3594.00m,
                            PurchaseStore = "NA",
                            SerialNumber = "NA",
                            TosNumber = " TOS0705C"
                        },
                        new
                        {
                            Id = 2,
                            Destroyed = false,
                            DeviceTypeId = 2,
                            ModelNumber = "NA",
                            Notes = "Dell Dimension E520/EQT5131",
                            OperatingSystem = "unknown",
                            OwnerLocation = 2,
                            PurchaseDate = new DateOnly(2007, 3, 1),
                            PurchasePrice = 1.00m,
                            PurchaseStore = "NA",
                            SerialNumber = "NA",
                            TosNumber = "TOSO703AA"
                        },
                        new
                        {
                            Id = 3,
                            Destroyed = false,
                            DeviceTypeId = 1,
                            ModelNumber = "NA",
                            Notes = "Dell Poweredge 2900/EQT5134/Spare",
                            OperatingSystem = "Windows 2008 Server w/Downgrade Windows Server 2003 SP2 32 bit X64",
                            OwnerLocation = 4,
                            PowerSupply = "Redundant Power Supply",
                            PurchaseDate = new DateOnly(2008, 5, 1),
                            PurchasePrice = 7085.00m,
                            PurchaseStore = "NA",
                            SerialNumber = "NA",
                            TosNumber = "TOS0805D"
                        },
                        new
                        {
                            Id = 4,
                            Destroyed = true,
                            DeviceTypeId = 3,
                            ModelNumber = "unknown",
                            Notes = "Dell Vostro 1520 Celeron 575/EQT5136/Disposed in 2018",
                            OperatingSystem = "Windows Vista Buisness",
                            OwnerLocation = 3,
                            PowerSupply = "6 Cell Lithium Ion Battery",
                            PurchaseDate = new DateOnly(2009, 7, 1),
                            PurchasePrice = 964.00m,
                            PurchaseStore = "unknown",
                            SerialNumber = "unknown",
                            TosNumber = "TOSL0907B"
                        },
                        new
                        {
                            Id = 5,
                            Destroyed = true,
                            DeviceTypeId = 3,
                            ModelNumber = "unknown",
                            Notes = "Dell Vostro 1520 Celeron 575/EQT5136/Disposed in 2018",
                            OperatingSystem = "Windows Vista Buisness",
                            OwnerLocation = 3,
                            PowerSupply = "6 Cell Lithium Ion Battery",
                            PurchaseDate = new DateOnly(2009, 7, 1),
                            PurchasePrice = 964.00m,
                            PurchaseStore = "unknown",
                            SerialNumber = "unknown",
                            TosNumber = "TOSL0907C"
                        },
                        new
                        {
                            Id = 6,
                            Destroyed = true,
                            DeviceTypeId = 3,
                            ModelNumber = "unknown",
                            Notes = "Dell Vostro 1520 Celeron 575/EQT5136/Disposed in 2018",
                            OperatingSystem = "Windows Vista Buisness",
                            OwnerLocation = 3,
                            PowerSupply = "6 Cell Lithium Ion Battery",
                            PurchaseDate = new DateOnly(2009, 7, 1),
                            PurchasePrice = 964.00m,
                            PurchaseStore = "unknown",
                            SerialNumber = "unknown",
                            TosNumber = "TOSL0907E"
                        },
                        new
                        {
                            Id = 7,
                            Destroyed = false,
                            DeviceTypeId = 2,
                            ModelNumber = "unknown",
                            Notes = "EQT5145/Motherboard-ASUS P6T6 WS Revolution X58 ATX",
                            OperatingSystem = "Windows 7 Pro 64 bit",
                            OwnerLocation = 5,
                            PurchaseDate = new DateOnly(2009, 12, 1),
                            PurchasePrice = 1.00m,
                            PurchaseStore = "unknown",
                            SerialNumber = "unknown",
                            TosNumber = "TOS0912"
                        },
                        new
                        {
                            Id = 8,
                            Destroyed = false,
                            DeviceTypeId = 3,
                            ModelNumber = "unknown",
                            Notes = "TOSL1005B/Dell Precision M6400",
                            OperatingSystem = "Windows 7 pro",
                            OwnerLocation = 6,
                            PowerSupply = "Battery",
                            PurchaseDate = new DateOnly(2010, 6, 15),
                            PurchasePrice = 1.00m,
                            PurchaseStore = "unknown",
                            SerialNumber = "unknown",
                            TosNumber = "TOSL1004"
                        },
                        new
                        {
                            Id = 9,
                            Destroyed = false,
                            DeviceTypeId = 1,
                            ModelNumber = "unknown",
                            Notes = "Spare/EQT5148/Dell Poweredge R710/VMWare Server/8M Cache/Turbo/HT/1066MHz Max Mem/1333 MHZ Dual Ranked RDIMMs/iDRAC6 Enterprise/Ultra 320 SCSI PCI3 Host Adapter",
                            OperatingSystem = "Windows 2008 Small Business SErver Standard w/5 CAL",
                            OwnerLocation = 7,
                            PowerSupply = "Redundant 570 Watt",
                            PurchaseDate = new DateOnly(2010, 2, 1),
                            PurchasePrice = 15000.00m,
                            PurchaseStore = "unknown",
                            SerialNumber = "unknown",
                            TosNumber = "TOS"
                        },
                        new
                        {
                            Id = 10,
                            Destroyed = false,
                            DeviceTypeId = 3,
                            ModelNumber = "unknown",
                            Notes = "HP ProBook 6500B WX303UT/EQT5153",
                            OperatingSystem = "Windows 7 Pro 64 Bit",
                            OwnerLocation = 8,
                            PowerSupply = "Battery",
                            PurchaseDate = new DateOnly(2011, 3, 1),
                            PurchasePrice = 1300.00m,
                            PurchaseStore = "unknown",
                            SerialNumber = "CNU1080527",
                            TosNumber = "TOSL1103"
                        },
                        new
                        {
                            Id = 11,
                            Destroyed = true,
                            DeviceTypeId = 3,
                            ModelNumber = "unknown",
                            Notes = "EQT5153/Touch Intel P-Series/Speakers/Mouse/Keyboard",
                            OperatingSystem = "Windows 7 PRo 64 Bit",
                            OwnerLocation = 3,
                            PowerSupply = "Battery",
                            PurchaseDate = new DateOnly(2011, 11, 1),
                            PurchasePrice = 1730.00m,
                            PurchaseStore = "unknown",
                            SerialNumber = "unknown",
                            TosNumber = "TOS1111C"
                        },
                        new
                        {
                            Id = 12,
                            Destroyed = true,
                            DeviceTypeId = 3,
                            ModelNumber = "unknown",
                            Notes = "EQT5153/Touch Intel P-Series/Speakers/Mouse/Keyboard",
                            OperatingSystem = "Windows 7 PRo 64 Bit",
                            OwnerLocation = 3,
                            PowerSupply = "Battery",
                            PurchaseDate = new DateOnly(2011, 11, 1),
                            PurchasePrice = 1730.00m,
                            PurchaseStore = "unknown",
                            SerialNumber = "unknown",
                            TosNumber = "TOS1111D"
                        },
                        new
                        {
                            Id = 13,
                            Destroyed = true,
                            DeviceTypeId = 3,
                            ModelNumber = "V1116390",
                            Notes = "EQT5153/Touch Intel P-Series/Speakers/Mouse/Keyboard",
                            OperatingSystem = "Windows 7 PRo 64 Bit",
                            OwnerLocation = 3,
                            PowerSupply = "Battery",
                            PurchaseDate = new DateOnly(2011, 11, 1),
                            PurchasePrice = 1843.00m,
                            PurchaseStore = "unknown",
                            SerialNumber = "124973",
                            TosNumber = "TOS1111B"
                        },
                        new
                        {
                            Id = 14,
                            Destroyed = true,
                            DeviceTypeId = 3,
                            ModelNumber = "V1116391",
                            Notes = "EQT5153/Touch Intel P-Series/Speakers/Mouse/Keyboard",
                            OperatingSystem = "Windows 7 PRo 64 Bit",
                            OwnerLocation = 3,
                            PowerSupply = "Battery",
                            PurchaseDate = new DateOnly(2011, 11, 1),
                            PurchasePrice = 1627.00m,
                            PurchaseStore = "unknown",
                            SerialNumber = "124974",
                            TosNumber = "TOS1111A"
                        },
                        new
                        {
                            Id = 15,
                            Destroyed = false,
                            DeviceTypeId = 3,
                            ModelNumber = "V1116380",
                            Notes = "EQT5153/Touch Intel P-Series/Speakers/Mouse/Keyboard",
                            OperatingSystem = "Windows 7 Pro 64 Bit",
                            OwnerLocation = 1,
                            PurchaseDate = new DateOnly(2011, 11, 1),
                            PurchasePrice = 1726.00m,
                            PurchaseStore = "unknown",
                            SerialNumber = "124975",
                            TosNumber = "TOS1111E"
                        },
                        new
                        {
                            Id = 16,
                            Destroyed = false,
                            DeviceTypeId = 3,
                            ModelNumber = "V1210920",
                            Notes = "EQT5160/Touch Intel P-Series/Mouse/Keyboard",
                            OperatingSystem = "Windows 7 Pro 64 Bit",
                            OwnerLocation = 8,
                            PurchaseDate = new DateOnly(2011, 11, 1),
                            PurchasePrice = 1703.00m,
                            PurchaseStore = "unknown",
                            SerialNumber = "125409",
                            TosNumber = "TOS1205"
                        },
                        new
                        {
                            Id = 17,
                            Destroyed = false,
                            DeviceTypeId = 6,
                            ModelNumber = "unknown",
                            Notes = "EQT5160/Apple iPad3 w/wifi/Black/Front&Rear Cameras/Smart Cover&Logitech wireless keyboard w/stand",
                            OperatingSystem = "iOS",
                            OwnerLocation = 9,
                            PurchaseDate = new DateOnly(2012, 10, 1),
                            PurchasePrice = 710.00m,
                            PurchaseStore = "unknown",
                            SerialNumber = "unknown",
                            TosNumber = "TOS1210"
                        });
                });

            modelBuilder.Entity("TownOfStettler.Models.DisplayMonitor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("ID");

                    b.Property<int?>("History")
                        .HasColumnType("int(11)");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<int?>("NumberOfOutputs")
                        .HasColumnType("int(11)")
                        .HasColumnName("Number of Outputs");

                    b.Property<string>("OutputType")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("Output Type");

                    b.Property<int?>("RefreshRateHz")
                        .HasColumnType("int(3)")
                        .HasColumnName("Refresh Rate (Hz)");

                    b.Property<string>("Resolution")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Serial Number");

                    b.Property<string>("TosNumber")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("TOS Number");

                    b.Property<decimal>("ViewSizeInches")
                        .HasPrecision(3, 2)
                        .HasColumnType("decimal(3,2)")
                        .HasColumnName("View Size (Inches)");

                    b.Property<string>("ViewType")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("View Type");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "History" }, "History");

                    b.ToTable("display monitors", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Notes = "WXGA Anti Glare",
                            NumberOfOutputs = 1,
                            OutputType = "Unknown",
                            RefreshRateHz = 0,
                            Resolution = "NA",
                            SerialNumber = "unknown",
                            TosNumber = "unknown",
                            ViewSizeInches = 15.4m,
                            ViewType = "LCD "
                        },
                        new
                        {
                            Id = 2,
                            Notes = "NA",
                            SerialNumber = "unknown",
                            TosNumber = "unknown",
                            ViewSizeInches = 17.0m,
                            ViewType = "monitor"
                        },
                        new
                        {
                            Id = 3,
                            Notes = "NA",
                            RefreshRateHz = 0,
                            Resolution = "1366 x 768",
                            SerialNumber = "unknown",
                            TosNumber = "unknown",
                            ViewSizeInches = 15.6m,
                            ViewType = "LED"
                        },
                        new
                        {
                            Id = 4,
                            Notes = "NA",
                            Resolution = "2048x1536",
                            SerialNumber = "unknown",
                            TosNumber = "unknown",
                            ViewSizeInches = 9.7m,
                            ViewType = "Retina"
                        });
                });

            modelBuilder.Entity("TownOfStettler.Models.EthernetNetwork", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("ID");

                    b.Property<bool>("Bluetooth")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Destroyed")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("DeviceId")
                        .HasColumnType("int(11)")
                        .HasColumnName("Device ID");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("Serial Number");

                    b.Property<string>("Speed")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<bool>("Wireless")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "DeviceId" }, "ethernet/network_ibfk_1");

                    b.ToTable("ethernet/network", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Bluetooth = false,
                            Destroyed = false,
                            DeviceId = 3,
                            Notes = "NA",
                            SerialNumber = "unknown",
                            Speed = "1000",
                            Wireless = false
                        },
                        new
                        {
                            Id = 2,
                            Bluetooth = false,
                            Destroyed = false,
                            DeviceId = 3,
                            Notes = "NA",
                            SerialNumber = "unknown",
                            Speed = "1000",
                            Wireless = false
                        },
                        new
                        {
                            Id = 3,
                            Bluetooth = false,
                            Destroyed = false,
                            DeviceId = 9,
                            Notes = "Broadcom NetXtreme II 5709 Gigabit Ethernet NIC",
                            SerialNumber = "unknown",
                            Speed = "",
                            Wireless = false
                        },
                        new
                        {
                            Id = 4,
                            Bluetooth = true,
                            Destroyed = false,
                            DeviceId = 10,
                            Notes = "NA",
                            SerialNumber = "Unknown",
                            Speed = "10/100/1000 LAN",
                            Wireless = true
                        },
                        new
                        {
                            Id = 5,
                            Bluetooth = true,
                            Destroyed = true,
                            DeviceId = 11,
                            Notes = "NA",
                            SerialNumber = "Unknown",
                            Speed = "10/100/1000 LAN",
                            Wireless = true
                        },
                        new
                        {
                            Id = 6,
                            Bluetooth = true,
                            Destroyed = true,
                            DeviceId = 12,
                            Notes = "NA",
                            SerialNumber = "Unknown",
                            Speed = "10/100/1000 LAN",
                            Wireless = true
                        },
                        new
                        {
                            Id = 7,
                            Bluetooth = true,
                            Destroyed = true,
                            DeviceId = 13,
                            Notes = "NA",
                            SerialNumber = "Unknown",
                            Speed = "10/100/1000 LAN",
                            Wireless = true
                        },
                        new
                        {
                            Id = 8,
                            Bluetooth = true,
                            Destroyed = true,
                            DeviceId = 14,
                            Notes = "NA",
                            SerialNumber = "Unknown",
                            Speed = "10/100/1000 LAN",
                            Wireless = true
                        },
                        new
                        {
                            Id = 9,
                            Bluetooth = true,
                            Destroyed = false,
                            DeviceId = 15,
                            Notes = "NA",
                            SerialNumber = "Unknown",
                            Speed = "10/100/1000 LAN",
                            Wireless = true
                        },
                        new
                        {
                            Id = 10,
                            Bluetooth = true,
                            Destroyed = false,
                            DeviceId = 16,
                            Notes = "NA",
                            SerialNumber = "Unknown",
                            Speed = "10/100/1000 LAN",
                            Wireless = true
                        });
                });

            modelBuilder.Entity("TownOfStettler.Models.HardDrive", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("ID");

                    b.Property<bool>("Destroyed")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("DeviceId")
                        .HasColumnType("int(11)")
                        .HasColumnName("Device ID");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("Serial Number");

                    b.Property<int>("SizeGb")
                        .HasColumnType("int(7)")
                        .HasColumnName("Size (Gb)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "DeviceId" }, "hard drive_ibfk_1");

                    b.ToTable("hard drive", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Destroyed = false,
                            DeviceId = 1,
                            Notes = "NA",
                            SerialNumber = "unknown",
                            SizeGb = 160,
                            Type = "Unknown"
                        },
                        new
                        {
                            Id = 2,
                            Destroyed = false,
                            DeviceId = 1,
                            Notes = "NA",
                            SerialNumber = "unknown",
                            SizeGb = 160,
                            Type = "Raid"
                        },
                        new
                        {
                            Id = 3,
                            Destroyed = false,
                            DeviceId = 3,
                            Notes = "OS",
                            SerialNumber = "unknown",
                            SizeGb = 73,
                            Type = "Hot Swap"
                        },
                        new
                        {
                            Id = 4,
                            Destroyed = false,
                            DeviceId = 3,
                            Notes = "OS",
                            SerialNumber = "unknown",
                            SizeGb = 73,
                            Type = "Hot Swap"
                        },
                        new
                        {
                            Id = 5,
                            Destroyed = false,
                            DeviceId = 3,
                            Notes = "Data   15K RPM",
                            SerialNumber = "unknown",
                            SizeGb = 300,
                            Type = "Hot Swap"
                        },
                        new
                        {
                            Id = 6,
                            Destroyed = false,
                            DeviceId = 3,
                            Notes = "Data   15K RPM",
                            SerialNumber = "unknown",
                            SizeGb = 300,
                            Type = "Hot Swap"
                        },
                        new
                        {
                            Id = 7,
                            Destroyed = false,
                            DeviceId = 3,
                            Notes = "Data   15K RPM",
                            SerialNumber = "unknown",
                            SizeGb = 300,
                            Type = "Hot Swap"
                        },
                        new
                        {
                            Id = 8,
                            Destroyed = true,
                            DeviceId = 4,
                            Notes = "5400rpm/",
                            SerialNumber = "unknown",
                            SizeGb = 160,
                            Type = "SATA"
                        },
                        new
                        {
                            Id = 9,
                            Destroyed = true,
                            DeviceId = 5,
                            Notes = "5400rpm/",
                            SerialNumber = "unknown",
                            SizeGb = 160,
                            Type = "SATA"
                        },
                        new
                        {
                            Id = 10,
                            Destroyed = true,
                            DeviceId = 6,
                            Notes = "5400rpm/",
                            SerialNumber = "unknown",
                            SizeGb = 160,
                            Type = "SATA"
                        },
                        new
                        {
                            Id = 11,
                            Destroyed = false,
                            DeviceId = 7,
                            Notes = "7200rpm/",
                            SerialNumber = "unknown",
                            SizeGb = 1000,
                            Type = "SATA"
                        },
                        new
                        {
                            Id = 12,
                            Destroyed = false,
                            DeviceId = 7,
                            Notes = "Digital VelociRaptor 10000",
                            SerialNumber = "unknown",
                            SizeGb = 300,
                            Type = "SATA 2"
                        },
                        new
                        {
                            Id = 13,
                            Destroyed = false,
                            DeviceId = 8,
                            Notes = "NA",
                            SerialNumber = "unknown",
                            SizeGb = 150,
                            Type = "unknown"
                        },
                        new
                        {
                            Id = 14,
                            Destroyed = false,
                            DeviceId = 9,
                            Notes = "7200rpm/Near Line SAS 3.5'' Hot Plug",
                            SerialNumber = "unknown",
                            SizeGb = 500,
                            Type = "RAID"
                        },
                        new
                        {
                            Id = 15,
                            Destroyed = false,
                            DeviceId = 9,
                            Notes = "7200rpm/Near Line SAS 3.5'' Hot Plug",
                            SerialNumber = "unknown",
                            SizeGb = 500,
                            Type = "RAID"
                        },
                        new
                        {
                            Id = 16,
                            Destroyed = false,
                            DeviceId = 9,
                            Notes = "7200rpm/Near Line SAS 3.5'' Hot Plug",
                            SerialNumber = "unknown",
                            SizeGb = 500,
                            Type = "RAID"
                        },
                        new
                        {
                            Id = 17,
                            Destroyed = false,
                            DeviceId = 9,
                            Notes = "7200rpm/Near Line SAS 3.5'' Hot Plug",
                            SerialNumber = "unknown",
                            SizeGb = 500,
                            Type = "RAID"
                        },
                        new
                        {
                            Id = 18,
                            Destroyed = false,
                            DeviceId = 10,
                            Notes = "7200rpm",
                            SerialNumber = "unknown",
                            SizeGb = 320,
                            Type = "SATA II"
                        },
                        new
                        {
                            Id = 19,
                            Destroyed = true,
                            DeviceId = 11,
                            Notes = "NA",
                            SerialNumber = "Unknown",
                            SizeGb = 250,
                            Type = "SATA"
                        },
                        new
                        {
                            Id = 20,
                            Destroyed = true,
                            DeviceId = 12,
                            Notes = "NA",
                            SerialNumber = "Unknown",
                            SizeGb = 250,
                            Type = "SATA"
                        },
                        new
                        {
                            Id = 21,
                            Destroyed = true,
                            DeviceId = 13,
                            Notes = "NA",
                            SerialNumber = "Unknown",
                            SizeGb = 300,
                            Type = "SATA"
                        },
                        new
                        {
                            Id = 22,
                            Destroyed = true,
                            DeviceId = 14,
                            Notes = "NA",
                            SerialNumber = "Unknown",
                            SizeGb = 300,
                            Type = "SATA"
                        },
                        new
                        {
                            Id = 23,
                            Destroyed = false,
                            DeviceId = 15,
                            Notes = "NA",
                            SerialNumber = "Unknown",
                            SizeGb = 250,
                            Type = "SATA"
                        },
                        new
                        {
                            Id = 24,
                            Destroyed = false,
                            DeviceId = 16,
                            Notes = "NA",
                            SerialNumber = "Unknown",
                            SizeGb = 320,
                            Type = "SATA"
                        },
                        new
                        {
                            Id = 25,
                            Destroyed = false,
                            DeviceId = 17,
                            Notes = "NA",
                            SerialNumber = "unknown",
                            SizeGb = 16,
                            Type = "Apple"
                        });
                });

            modelBuilder.Entity("TownOfStettler.Models.HardwareDevice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("ID");

                    b.Property<string>("TypeOfHardware")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("Type of Hardware");

                    b.HasKey("Id");

                    b.ToTable("hardware device", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            TypeOfHardware = "Server"
                        },
                        new
                        {
                            Id = 2,
                            TypeOfHardware = "Desktop"
                        },
                        new
                        {
                            Id = 3,
                            TypeOfHardware = "Laptop"
                        },
                        new
                        {
                            Id = 4,
                            TypeOfHardware = "Monitor"
                        },
                        new
                        {
                            Id = 5,
                            TypeOfHardware = "Printer"
                        },
                        new
                        {
                            Id = 6,
                            TypeOfHardware = "Misc. Devices"
                        });
                });

            modelBuilder.Entity("TownOfStettler.Models.History", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("ID");

                    b.Property<DateOnly>("DateOfChanges")
                        .HasColumnType("date")
                        .HasColumnName("Date of Changes");

                    b.Property<int?>("DeviceId")
                        .HasColumnType("int(11)")
                        .HasColumnName("Device ID");

                    b.Property<int>("DeviceTypeId")
                        .HasColumnType("int(11)")
                        .HasColumnName("Device Type ID");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<DateOnly?>("OutOfServiceDate")
                        .HasColumnType("date")
                        .HasColumnName("Out of Service Date");

                    b.Property<int?>("PartsChanged")
                        .HasColumnType("int(11)")
                        .HasColumnName("Parts Changed");

                    b.Property<int?>("PartsRemoved")
                        .HasColumnType("int(11)")
                        .HasColumnName("Parts Removed");

                    b.Property<int?>("PastOwnerS")
                        .HasColumnType("int(11)")
                        .HasColumnName("Past Owner(s)");

                    b.Property<bool?>("Wiped")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "DeviceTypeId" }, "Device Type ID");

                    b.HasIndex(new[] { "DeviceId" }, "history_ibfk_1");

                    b.HasIndex(new[] { "PastOwnerS" }, "history_ibfk_2");

                    b.HasIndex(new[] { "PartsChanged" }, "history_ibfk_3");

                    b.ToTable("history", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateOfChanges = new DateOnly(1, 1, 1),
                            DeviceId = 2,
                            DeviceTypeId = 2,
                            Notes = "Dell Dimension E520",
                            Wiped = true
                        },
                        new
                        {
                            Id = 2,
                            DateOfChanges = new DateOnly(1, 1, 1),
                            DeviceId = 4,
                            DeviceTypeId = 3,
                            Notes = "NA",
                            OutOfServiceDate = new DateOnly(2018, 7, 1)
                        },
                        new
                        {
                            Id = 3,
                            DateOfChanges = new DateOnly(1, 1, 1),
                            DeviceId = 5,
                            DeviceTypeId = 3,
                            Notes = "NA",
                            OutOfServiceDate = new DateOnly(2018, 7, 1)
                        },
                        new
                        {
                            Id = 4,
                            DateOfChanges = new DateOnly(1, 1, 1),
                            DeviceId = 6,
                            DeviceTypeId = 3,
                            Notes = "NA",
                            OutOfServiceDate = new DateOnly(2018, 7, 1)
                        },
                        new
                        {
                            Id = 5,
                            DateOfChanges = new DateOnly(1, 1, 1),
                            DeviceId = 10,
                            DeviceTypeId = 3,
                            Notes = "NA",
                            Wiped = true
                        },
                        new
                        {
                            Id = 6,
                            DateOfChanges = new DateOnly(1, 1, 1),
                            DeviceId = 11,
                            DeviceTypeId = 3,
                            Notes = "NA",
                            OutOfServiceDate = new DateOnly(2018, 7, 1)
                        },
                        new
                        {
                            Id = 7,
                            DateOfChanges = new DateOnly(1, 1, 1),
                            DeviceId = 12,
                            DeviceTypeId = 3,
                            Notes = "NA",
                            OutOfServiceDate = new DateOnly(2018, 7, 1)
                        },
                        new
                        {
                            Id = 8,
                            DateOfChanges = new DateOnly(1, 1, 1),
                            DeviceId = 13,
                            DeviceTypeId = 3,
                            Notes = "NA",
                            OutOfServiceDate = new DateOnly(2018, 7, 1)
                        },
                        new
                        {
                            Id = 9,
                            DateOfChanges = new DateOnly(1, 1, 1),
                            DeviceId = 14,
                            DeviceTypeId = 3,
                            Notes = "NA",
                            OutOfServiceDate = new DateOnly(2018, 7, 1)
                        },
                        new
                        {
                            Id = 10,
                            DateOfChanges = new DateOnly(1, 1, 1),
                            DeviceId = 16,
                            DeviceTypeId = 3,
                            Notes = "NA",
                            Wiped = true
                        });
                });

            modelBuilder.Entity("TownOfStettler.Models.InstalledSoftware", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("ID");

                    b.Property<int>("DeviceId")
                        .HasColumnType("int(11)")
                        .HasColumnName("Device ID");

                    b.Property<int>("SoftwareId")
                        .HasColumnType("int(11)")
                        .HasColumnName("Software ID");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "DeviceId" }, "Device ID");

                    b.HasIndex(new[] { "SoftwareId" }, "Software ID");

                    b.ToTable("installed software", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DeviceId = 1,
                            SoftwareId = 1
                        },
                        new
                        {
                            Id = 2,
                            DeviceId = 1,
                            SoftwareId = 4
                        },
                        new
                        {
                            Id = 3,
                            DeviceId = 1,
                            SoftwareId = 5
                        },
                        new
                        {
                            Id = 4,
                            DeviceId = 3,
                            SoftwareId = 1
                        },
                        new
                        {
                            Id = 5,
                            DeviceId = 1,
                            SoftwareId = 3
                        },
                        new
                        {
                            Id = 6,
                            DeviceId = 5,
                            SoftwareId = 3
                        },
                        new
                        {
                            Id = 7,
                            DeviceId = 6,
                            SoftwareId = 3
                        },
                        new
                        {
                            Id = 8,
                            DeviceId = 8,
                            SoftwareId = 6
                        },
                        new
                        {
                            Id = 9,
                            DeviceId = 8,
                            SoftwareId = 8
                        },
                        new
                        {
                            Id = 10,
                            DeviceId = 9,
                            SoftwareId = 9
                        },
                        new
                        {
                            Id = 11,
                            DeviceId = 9,
                            SoftwareId = 10
                        },
                        new
                        {
                            Id = 12,
                            DeviceId = 10,
                            SoftwareId = 6
                        },
                        new
                        {
                            Id = 13,
                            DeviceId = 10,
                            SoftwareId = 11
                        },
                        new
                        {
                            Id = 14,
                            DeviceId = 11,
                            SoftwareId = 6
                        },
                        new
                        {
                            Id = 15,
                            DeviceId = 11,
                            SoftwareId = 11
                        },
                        new
                        {
                            Id = 16,
                            DeviceId = 12,
                            SoftwareId = 6
                        },
                        new
                        {
                            Id = 17,
                            DeviceId = 12,
                            SoftwareId = 11
                        },
                        new
                        {
                            Id = 18,
                            DeviceId = 13,
                            SoftwareId = 6
                        },
                        new
                        {
                            Id = 19,
                            DeviceId = 13,
                            SoftwareId = 11
                        },
                        new
                        {
                            Id = 20,
                            DeviceId = 14,
                            SoftwareId = 6
                        },
                        new
                        {
                            Id = 21,
                            DeviceId = 14,
                            SoftwareId = 11
                        },
                        new
                        {
                            Id = 22,
                            DeviceId = 15,
                            SoftwareId = 6
                        },
                        new
                        {
                            Id = 23,
                            DeviceId = 15,
                            SoftwareId = 11
                        },
                        new
                        {
                            Id = 24,
                            DeviceId = 16,
                            SoftwareId = 6
                        },
                        new
                        {
                            Id = 25,
                            DeviceId = 16,
                            SoftwareId = 11
                        });
                });

            modelBuilder.Entity("TownOfStettler.Models.InuseMonitor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("ID");

                    b.Property<int>("DeviceId")
                        .HasColumnType("int(11)")
                        .HasColumnName("Device ID");

                    b.Property<int>("MonitorId")
                        .HasColumnType("int(11)")
                        .HasColumnName("Monitor ID");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "DeviceId" }, "Device ID")
                        .HasDatabaseName("Device ID1");

                    b.HasIndex(new[] { "MonitorId" }, "Monitor ID");

                    b.ToTable("inuse monitors", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DeviceId = 4,
                            MonitorId = 1
                        },
                        new
                        {
                            Id = 2,
                            DeviceId = 5,
                            MonitorId = 1
                        },
                        new
                        {
                            Id = 3,
                            DeviceId = 6,
                            MonitorId = 1
                        },
                        new
                        {
                            Id = 4,
                            DeviceId = 8,
                            MonitorId = 2
                        },
                        new
                        {
                            Id = 5,
                            DeviceId = 10,
                            MonitorId = 3
                        },
                        new
                        {
                            Id = 6,
                            DeviceId = 17,
                            MonitorId = 4
                        });
                });

            modelBuilder.Entity("TownOfStettler.Models.Modification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("ID");

                    b.Property<int?>("HardDriveId")
                        .HasColumnType("int(11)")
                        .HasColumnName("Hard Drive ID");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<int?>("ProcessorId")
                        .HasColumnType("int(11)")
                        .HasColumnName("Processor ID");

                    b.Property<int?>("RamId")
                        .HasColumnType("int(11)")
                        .HasColumnName("RAM ID");

                    b.Property<int?>("miscellaneousDriveId")
                        .HasColumnType("int(11)")
                        .HasColumnName("Miscellaneous Drive ID");

                    b.Property<int?>("SoundCardId")
                        .HasColumnType("int(11)")
                        .HasColumnName("Sound Card ID");

                    b.Property<int?>("VideoCardId")
                        .HasColumnType("int(11)")
                        .HasColumnName("Video Card ID");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "HardDriveId" }, "modifications_ibfk_1");

                    b.HasIndex(new[] { "ProcessorId" }, "modifications_ibfk_2");

                    b.HasIndex(new[] { "RamId" }, "modifications_ibfk_3");

                    b.HasIndex(new[] { "miscellaneousDriveId" }, "modifications_ibfk_4");

                    b.HasIndex(new[] { "SoundCardId" }, "modifications_ibfk_5");

                    b.HasIndex(new[] { "VideoCardId" }, "modifications_ibfk_6");

                    b.ToTable("modifications", (string)null);
                });

            modelBuilder.Entity("TownOfStettler.Models.OtherHardware", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("ID");

                    b.Property<bool>("Destroyed")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("History")
                        .HasColumnType("int(11)");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<int>("OwnerLocation")
                        .HasColumnType("int(11)")
                        .HasColumnName("Owner/Location");

                    b.Property<string>("TosNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("TOS Number");

                    b.Property<string>("TypeOfDevice")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "History" }, "History1");

                    b.HasIndex(new[] { "OwnerLocation" }, "other hardware_ibfk_1");

                    b.ToTable("other hardware", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Destroyed = false,
                            Notes = "NA",
                            OwnerLocation = 1,
                            TosNumber = "unknown",
                            TypeOfDevice = "Keyboard"
                        },
                        new
                        {
                            Id = 2,
                            Destroyed = false,
                            Notes = "NA",
                            OwnerLocation = 1,
                            TosNumber = "unknown",
                            TypeOfDevice = "Mouse"
                        },
                        new
                        {
                            Id = 3,
                            Destroyed = false,
                            Notes = "NA",
                            OwnerLocation = 1,
                            TosNumber = "unknown",
                            TypeOfDevice = "Network Switch"
                        });
                });

            modelBuilder.Entity("TownOfStettler.Models.Output", b =>
                {
                    b.Property<string>("Type")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<int>("NumberOfOutputs")
                        .HasColumnType("int(2)")
                        .HasColumnName("Number of Outputs");

                    b.Property<int>("VideoCardId")
                        .HasColumnType("int(11)")
                        .HasColumnName("Video Card ID");

                    b.HasKey("Type")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "VideoCardId" }, "outputs_ibfk_1");

                    b.ToTable("outputs", (string)null);
                });

            modelBuilder.Entity("TownOfStettler.Models.OwnerLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("ID");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("varchar(75)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(14)
                        .HasColumnType("varchar(14)")
                        .HasColumnName("Phone Number");

                    b.HasKey("Id");

                    b.ToTable("owner/location", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Fire Hall",
                            Name = "Fire Hall",
                            Notes = "Not Used"
                        },
                        new
                        {
                            Id = 2,
                            Address = "unknown",
                            Name = "unknown",
                            Notes = "Wiped"
                        },
                        new
                        {
                            Id = 3,
                            Address = "Unknown",
                            Name = "Disposed",
                            Notes = "Disposed "
                        },
                        new
                        {
                            Id = 4,
                            Address = "Unknown",
                            Name = "STAPP",
                            Notes = "NA "
                        },
                        new
                        {
                            Id = 5,
                            Address = "Unknown",
                            Name = "Graham",
                            Notes = "NA"
                        },
                        new
                        {
                            Id = 6,
                            Address = "Unknown",
                            Name = "Water Resivoir",
                            Notes = "NA"
                        },
                        new
                        {
                            Id = 7,
                            Address = "unknown",
                            Name = "TOSDC1",
                            Notes = "NA"
                        },
                        new
                        {
                            Id = 8,
                            Address = "unknown",
                            Name = "Downstairs",
                            Notes = "NA"
                        },
                        new
                        {
                            Id = 9,
                            Address = "unknown",
                            Name = "Ivan",
                            Notes = "NA"
                        });
                });

            modelBuilder.Entity("TownOfStettler.Models.Part", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("ID");

                    b.Property<int>("DeviceHistoryId")
                        .HasColumnType("int(11)")
                        .HasColumnName("Device History ID");

                    b.Property<int?>("HardDriveId")
                        .HasColumnType("int(11)")
                        .HasColumnName("Hard Drive ID");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<int>("OriginalDeviceId")
                        .HasColumnType("int(11)")
                        .HasColumnName("Original Device ID");

                    b.Property<int?>("RamId")
                        .HasColumnType("int(11)")
                        .HasColumnName("RAM ID");

                    b.Property<int?>("miscellaneousDriveId")
                        .HasColumnType("int(11)")
                        .HasColumnName("Miscellaneous Drive ID");

                    b.Property<int?>("SoundCardId")
                        .HasColumnType("int(11)")
                        .HasColumnName("Sound Card ID");

                    b.Property<int?>("VideoCardId")
                        .HasColumnType("int(11)")
                        .HasColumnName("Video Card ID");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "HardDriveId" }, "parts_ibfk_2");

                    b.HasIndex(new[] { "RamId" }, "parts_ibfk_3");

                    b.HasIndex(new[] { "miscellaneousDriveId" }, "parts_ibfk_4");

                    b.HasIndex(new[] { "SoundCardId" }, "parts_ibfk_5");

                    b.HasIndex(new[] { "VideoCardId" }, "parts_ibfk_6");

                    b.HasIndex(new[] { "DeviceHistoryId" }, "parts_ibfk_7");

                    b.HasIndex(new[] { "OriginalDeviceId" }, "parts_ibfk_8");

                    b.ToTable("parts", (string)null);
                });

            modelBuilder.Entity("TownOfStettler.Models.Printer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("ID");

                    b.Property<string>("ConnectionType")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("Connection Type");

                    b.Property<int?>("DeviceId")
                        .HasColumnType("int(11)")
                        .HasColumnName("Device ID");

                    b.Property<int?>("History")
                        .HasColumnType("int(11)");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<int>("OwnerLocation")
                        .HasColumnType("int(11)")
                        .HasColumnName("Owner/Location");

                    b.Property<string>("TosNumber")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("TOS Number");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "History" }, "History2");

                    b.HasIndex(new[] { "DeviceId" }, "printers_ibfk_1");

                    b.HasIndex(new[] { "OwnerLocation" }, "printers_ibfk_2");

                    b.ToTable("printers", (string)null);
                });

            modelBuilder.Entity("TownOfStettler.Models.Processor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("ID");

                    b.Property<int?>("CoreCount")
                        .HasColumnType("int(11)")
                        .HasColumnName("Core Count");

                    b.Property<bool?>("Destroyed")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("DeviceId")
                        .HasColumnType("int(11)")
                        .HasColumnName("Device ID");

                    b.Property<int?>("Generation")
                        .HasColumnType("int(11)");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("Serial Number");

                    b.Property<decimal>("SpeedGhz")
                        .HasPrecision(5, 3)
                        .HasColumnType("decimal(5,3)")
                        .HasColumnName("Speed (GHz)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "DeviceId" }, "processor_ibfk_1");

                    b.ToTable("processor", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CoreCount = 4,
                            Destroyed = false,
                            DeviceId = 1,
                            Notes = "NA",
                            SerialNumber = "unknown",
                            SpeedGhz = 2.13m,
                            Type = "Intel Xeon"
                        },
                        new
                        {
                            Id = 2,
                            CoreCount = 4,
                            Destroyed = false,
                            DeviceId = 3,
                            Notes = "2 Processors in this unit.  E54302x6MB Cache, 1333MHz FSB",
                            SerialNumber = "unknown",
                            SpeedGhz = 2.66m,
                            Type = "Intel Xeon"
                        },
                        new
                        {
                            Id = 3,
                            Destroyed = false,
                            DeviceId = 7,
                            SerialNumber = "unknown",
                            SpeedGhz = 2.67m,
                            Type = "Intel i7"
                        },
                        new
                        {
                            Id = 4,
                            Destroyed = false,
                            DeviceId = 8,
                            Notes = "Core 2 Duo P8700",
                            SerialNumber = "unknown",
                            SpeedGhz = 2.53m,
                            Type = "Intel"
                        },
                        new
                        {
                            Id = 5,
                            Destroyed = false,
                            DeviceId = 9,
                            Notes = "E5530/",
                            SerialNumber = "unknown",
                            SpeedGhz = 2.4m,
                            Type = " Intel Xeon"
                        },
                        new
                        {
                            Id = 6,
                            Destroyed = false,
                            DeviceId = 10,
                            Notes = "i5 460M, 3MB L3 Cache",
                            SerialNumber = "unknown",
                            SpeedGhz = 2.53m,
                            Type = "Intel i5"
                        },
                        new
                        {
                            Id = 7,
                            Destroyed = true,
                            DeviceId = 11,
                            Notes = "1155 8M Box",
                            SerialNumber = "Unknown",
                            SpeedGhz = 3.10m,
                            Type = "Intel Q/Xeon"
                        },
                        new
                        {
                            Id = 8,
                            Destroyed = true,
                            DeviceId = 12,
                            Notes = "1155 8M Box",
                            SerialNumber = "Unknown",
                            SpeedGhz = 3.10m,
                            Type = "Intel Q/Xeon"
                        },
                        new
                        {
                            Id = 9,
                            Destroyed = true,
                            DeviceId = 13,
                            Notes = "1155 8M Box",
                            SerialNumber = "Unknown",
                            SpeedGhz = 3.10m,
                            Type = "Intel Q/Xeon"
                        },
                        new
                        {
                            Id = 10,
                            Destroyed = true,
                            DeviceId = 14,
                            Notes = "1155 8M Box",
                            SerialNumber = "Unknown",
                            SpeedGhz = 3.10m,
                            Type = "Intel Q/Xeon"
                        },
                        new
                        {
                            Id = 11,
                            Destroyed = false,
                            DeviceId = 15,
                            Notes = "1155 8M Box",
                            SerialNumber = "Unknown",
                            SpeedGhz = 3.10m,
                            Type = "Intel Q/Xeon"
                        },
                        new
                        {
                            Id = 12,
                            Destroyed = false,
                            DeviceId = 16,
                            Notes = "1155 8M Box",
                            SerialNumber = "Unknown",
                            SpeedGhz = 3.10m,
                            Type = "Intel Q/Xeon"
                        });
                });

            modelBuilder.Entity("TownOfStettler.Models.Ram", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("ID");

                    b.Property<bool>("Destroyed")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("DeviceId")
                        .HasColumnType("int(11)")
                        .HasColumnName("Device ID");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("Serial Number");

                    b.Property<int>("SizeGb")
                        .HasColumnType("int(11)")
                        .HasColumnName("Size (Gb)");

                    b.Property<int?>("SpeedMhz")
                        .HasColumnType("int(5)")
                        .HasColumnName("Speed (MHz)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "DeviceId" }, "ram_ibfk_1");

                    b.ToTable("ram", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Destroyed = false,
                            DeviceId = 1,
                            Notes = "NA",
                            SerialNumber = "unknown",
                            SizeGb = 2,
                            Type = "Unknown"
                        },
                        new
                        {
                            Id = 2,
                            Destroyed = false,
                            DeviceId = 3,
                            Notes = "4 Sticks in this unit",
                            SerialNumber = "unknown",
                            SizeGb = 1,
                            SpeedMhz = 667,
                            Type = "Unknown"
                        },
                        new
                        {
                            Id = 3,
                            Destroyed = true,
                            DeviceId = 4,
                            Notes = "NA",
                            SerialNumber = "unknown",
                            SizeGb = 3,
                            SpeedMhz = 800,
                            Type = "DDR2 SD"
                        },
                        new
                        {
                            Id = 4,
                            Destroyed = true,
                            DeviceId = 5,
                            Notes = "NA",
                            SerialNumber = "unknown",
                            SizeGb = 3,
                            SpeedMhz = 800,
                            Type = "DDR2 SD"
                        },
                        new
                        {
                            Id = 5,
                            Destroyed = true,
                            DeviceId = 6,
                            Notes = "NA",
                            SerialNumber = "unknown",
                            SizeGb = 3,
                            SpeedMhz = 800,
                            Type = "DDR2 SD"
                        },
                        new
                        {
                            Id = 6,
                            Destroyed = false,
                            DeviceId = 7,
                            Notes = "1600",
                            SerialNumber = "unknown",
                            SizeGb = 6,
                            Type = "DDR3"
                        },
                        new
                        {
                            Id = 7,
                            Destroyed = false,
                            DeviceId = 8,
                            Notes = "NA",
                            SerialNumber = "unknown",
                            SizeGb = 4,
                            Type = "not listed"
                        },
                        new
                        {
                            Id = 8,
                            Destroyed = false,
                            DeviceId = 9,
                            Notes = "4 sticks",
                            SerialNumber = "unknown",
                            SizeGb = 4,
                            SpeedMhz = 1333,
                            Type = "not listed"
                        },
                        new
                        {
                            Id = 9,
                            Destroyed = false,
                            DeviceId = 10,
                            Notes = "NA",
                            SerialNumber = "unknown",
                            SizeGb = 4,
                            SpeedMhz = 1333,
                            Type = "DDR"
                        },
                        new
                        {
                            Id = 10,
                            Destroyed = true,
                            DeviceId = 11,
                            Notes = "Kingston",
                            SerialNumber = "Unknown",
                            SizeGb = 4,
                            Type = "DDR3"
                        },
                        new
                        {
                            Id = 11,
                            Destroyed = true,
                            DeviceId = 12,
                            Notes = "Kingston",
                            SerialNumber = "Unknown",
                            SizeGb = 4,
                            Type = "DDR3"
                        },
                        new
                        {
                            Id = 12,
                            Destroyed = true,
                            DeviceId = 13,
                            Notes = "Kingston",
                            SerialNumber = "Unknown",
                            SizeGb = 4,
                            Type = "DDR3"
                        },
                        new
                        {
                            Id = 13,
                            Destroyed = true,
                            DeviceId = 14,
                            Notes = "Kingston",
                            SerialNumber = "Unknown",
                            SizeGb = 4,
                            Type = "DDR3"
                        },
                        new
                        {
                            Id = 14,
                            Destroyed = true,
                            DeviceId = 15,
                            Notes = "Kingston",
                            SerialNumber = "Unknown",
                            SizeGb = 8,
                            Type = "DDR3"
                        },
                        new
                        {
                            Id = 15,
                            Destroyed = false,
                            DeviceId = 16,
                            Notes = "Kingston",
                            SerialNumber = "Unknown",
                            SizeGb = 4,
                            Type = "DDR3"
                        },
                        new
                        {
                            Id = 16,
                            Destroyed = false,
                            DeviceId = 17,
                            Notes = "Ram is not 512 GB, its 512 MB...Apple iPad",
                            SerialNumber = "unknown",
                            SizeGb = 512,
                            Type = "Apple"
                        });
                });

            modelBuilder.Entity("TownOfStettler.Models.miscellaneousDrive", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("ID");

                    b.Property<bool>("Destroyed")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("DeviceId")
                        .HasColumnType("int(11)")
                        .HasColumnName("Device ID");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<bool>("Removable")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("Serial Number");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "DeviceId" }, "miscellaneous drives_ibfk_1");

                    b.ToTable("miscellaneous drives", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Destroyed = false,
                            DeviceId = 1,
                            Notes = "NA",
                            Removable = true,
                            SerialNumber = "unknown",
                            Type = "Not Stated/Backup"
                        },
                        new
                        {
                            Id = 2,
                            Destroyed = false,
                            DeviceId = 1,
                            Notes = "NA",
                            Removable = false,
                            SerialNumber = "unknown",
                            Type = "CD-RW"
                        },
                        new
                        {
                            Id = 3,
                            Destroyed = true,
                            DeviceId = 4,
                            Notes = "NA",
                            Removable = false,
                            SerialNumber = "unknown",
                            Type = "DVD +/- RW"
                        },
                        new
                        {
                            Id = 4,
                            Destroyed = true,
                            DeviceId = 5,
                            Notes = "NA",
                            Removable = false,
                            SerialNumber = "unknown",
                            Type = "DVD +/- RW"
                        },
                        new
                        {
                            Id = 5,
                            Destroyed = true,
                            DeviceId = 6,
                            Notes = "NA",
                            Removable = false,
                            SerialNumber = "unknown",
                            Type = "DVD +/- RW"
                        },
                        new
                        {
                            Id = 6,
                            Destroyed = false,
                            DeviceId = 9,
                            Notes = "LTO3 Backup Drive (TableTop)",
                            Removable = true,
                            SerialNumber = "unknown",
                            Type = "External"
                        },
                        new
                        {
                            Id = 7,
                            Destroyed = false,
                            DeviceId = 10,
                            Notes = "Supermulti DL LightScribe",
                            Removable = false,
                            SerialNumber = "unknown",
                            Type = "DVD +/- RW"
                        },
                        new
                        {
                            Id = 8,
                            Destroyed = true,
                            DeviceId = 11,
                            Notes = "NA",
                            Removable = false,
                            SerialNumber = "Unknown",
                            Type = "Card Reader"
                        },
                        new
                        {
                            Id = 9,
                            Destroyed = true,
                            DeviceId = 12,
                            Notes = "NA",
                            Removable = false,
                            SerialNumber = "Unknown",
                            Type = "Card Reader"
                        },
                        new
                        {
                            Id = 10,
                            Destroyed = true,
                            DeviceId = 13,
                            Notes = "NA",
                            Removable = false,
                            SerialNumber = "Unknown",
                            Type = "Card Reader"
                        },
                        new
                        {
                            Id = 11,
                            Destroyed = true,
                            DeviceId = 14,
                            Notes = "NA",
                            Removable = false,
                            SerialNumber = "Unknown",
                            Type = "Card Reader"
                        },
                        new
                        {
                            Id = 12,
                            Destroyed = true,
                            DeviceId = 11,
                            Notes = "LG",
                            Removable = false,
                            SerialNumber = "Unknown",
                            Type = "DVD 22x/22x"
                        },
                        new
                        {
                            Id = 13,
                            Destroyed = true,
                            DeviceId = 12,
                            Notes = "LG",
                            Removable = false,
                            SerialNumber = "Unknown",
                            Type = "DVD 22x/22x"
                        },
                        new
                        {
                            Id = 14,
                            Destroyed = true,
                            DeviceId = 13,
                            Notes = "LG",
                            Removable = false,
                            SerialNumber = "Unknown",
                            Type = "DVD 22x/22x"
                        },
                        new
                        {
                            Id = 15,
                            Destroyed = true,
                            DeviceId = 14,
                            Notes = "LG",
                            Removable = false,
                            SerialNumber = "Unknown",
                            Type = "DVD 22x/22x"
                        },
                        new
                        {
                            Id = 16,
                            Destroyed = false,
                            DeviceId = 15,
                            Notes = "NA",
                            Removable = false,
                            SerialNumber = "Unknown",
                            Type = "Card Reader"
                        },
                        new
                        {
                            Id = 17,
                            Destroyed = false,
                            DeviceId = 15,
                            Notes = "LG",
                            Removable = false,
                            SerialNumber = "Unknown",
                            Type = "DVD 22x/22x"
                        },
                        new
                        {
                            Id = 18,
                            Destroyed = false,
                            DeviceId = 16,
                            Notes = "NA",
                            Removable = false,
                            SerialNumber = "Unknown",
                            Type = "Card Reader"
                        },
                        new
                        {
                            Id = 19,
                            Destroyed = false,
                            DeviceId = 16,
                            Notes = "LG",
                            Removable = false,
                            SerialNumber = "Unknown",
                            Type = "DVD 22x/22x"
                        });
                });

            modelBuilder.Entity("TownOfStettler.Models.Software", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(50)")
                        .HasColumnName("ID");

                    b.Property<string>("AssociatedAccount")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Associated Account");

                    b.Property<int?>("DevicesAllowed")
                        .HasColumnType("int(11)")
                        .HasColumnName("Devices Allowed");

                    b.Property<DateOnly?>("EndOfSupportDate")
                        .HasColumnType("date")
                        .HasColumnName("End of Support Date");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<string>("ProductKey")
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("Product Key");

                    b.Property<DateOnly?>("PurchaseDate")
                        .HasColumnType("date")
                        .HasColumnName("Purchase Date");

                    b.Property<decimal?>("PurchasePrice")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("Purchase Price");

                    b.Property<string>("SoftwareName")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("varchar(75)")
                        .HasColumnName("Software Name");

                    b.Property<bool?>("Subscription")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateOnly?>("SubscriptionEndDate")
                        .HasColumnType("date")
                        .HasColumnName("Subscription End Date");

                    b.HasKey("Id");

                    b.ToTable("software", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ProductKey = "unknown",
                            SoftwareName = "Windows 2003 Server - Standard"
                        },
                        new
                        {
                            Id = 2,
                            ProductKey = "Unknown",
                            SoftwareName = "Microsoft Excel 2007"
                        },
                        new
                        {
                            Id = 3,
                            ProductKey = "unknown",
                            SoftwareName = "Microsoft Office 2007 Small Buisness"
                        },
                        new
                        {
                            Id = 4,
                            ProductKey = "unknown",
                            SoftwareName = "5 Terminal Server CALS"
                        },
                        new
                        {
                            Id = 5,
                            ProductKey = "unknown",
                            SoftwareName = "Veritas Backup Exec"
                        },
                        new
                        {
                            Id = 6,
                            ProductKey = "unknown",
                            SoftwareName = "Windows 7 Pro 64 bit"
                        },
                        new
                        {
                            Id = 7,
                            ProductKey = "unknown",
                            SoftwareName = "Microsoft Office Pro 2010"
                        },
                        new
                        {
                            Id = 8,
                            ProductKey = "Unknonw",
                            SoftwareName = "Microsoft Office Pro 2007"
                        },
                        new
                        {
                            Id = 9,
                            ProductKey = "unknown",
                            SoftwareName = "Windows 2008 Small Business Server Standard w/5 CAL"
                        },
                        new
                        {
                            Id = 10,
                            ProductKey = "unknown",
                            SoftwareName = "Microsoft Small Business Server 2008 Std 20 User CAL"
                        },
                        new
                        {
                            Id = 11,
                            ProductKey = "unknown",
                            SoftwareName = "Microsoft Office 2010 Home & Business"
                        });
                });

            modelBuilder.Entity("TownOfStettler.Models.SoundCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("ID");

                    b.Property<string>("Brand")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<bool>("Destroyed")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("DeviceId")
                        .HasColumnType("int(11)")
                        .HasColumnName("Device ID");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "DeviceId" }, "sound card_ibfk_1");

                    b.ToTable("sound card", (string)null);
                });

            modelBuilder.Entity("TownOfStettler.Models.VideoCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("ID");

                    b.Property<string>("Brand")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<bool>("Destroyed")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("DeviceId")
                        .HasColumnType("int(11)")
                        .HasColumnName("Device ID");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<int>("RamSizeGb")
                        .HasColumnType("int(11)")
                        .HasColumnName("Ram Size (GB)");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("Serial Number");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "DeviceId" }, "video card_ibfk_1");

                    b.ToTable("video card", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Brand = "Quadro NVS290",
                            Destroyed = false,
                            DeviceId = 11,
                            Notes = "Low Profile",
                            RamSizeGb = 1,
                            SerialNumber = "Unknown"
                        },
                        new
                        {
                            Id = 2,
                            Brand = "Quadro NVS290",
                            Destroyed = false,
                            DeviceId = 12,
                            Notes = "Low Profile",
                            RamSizeGb = 1,
                            SerialNumber = "Unknown"
                        },
                        new
                        {
                            Id = 3,
                            Brand = "Quadro 600",
                            Destroyed = true,
                            DeviceId = 13,
                            Notes = "128 bit",
                            RamSizeGb = 1,
                            SerialNumber = "Unknown"
                        },
                        new
                        {
                            Id = 4,
                            Brand = "Quadro 600",
                            Destroyed = true,
                            DeviceId = 14,
                            Notes = "128 bit",
                            RamSizeGb = 1,
                            SerialNumber = "Unknown"
                        },
                        new
                        {
                            Id = 5,
                            Brand = "Quadro NVS290",
                            Destroyed = false,
                            DeviceId = 15,
                            Notes = "Low Profile",
                            RamSizeGb = 1,
                            SerialNumber = "Unknown"
                        },
                        new
                        {
                            Id = 6,
                            Brand = "PNY Quadro NVS600",
                            Destroyed = false,
                            DeviceId = 16,
                            Notes = "Low Profile",
                            RamSizeGb = 1,
                            SerialNumber = "Unknown"
                        });
                });

            modelBuilder.Entity("TownOfStettler.Models.Warranty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("ID");

                    b.Property<int>("DeviceId")
                        .HasColumnType("int(11)")
                        .HasColumnName("Device ID");

                    b.Property<string>("LengthOfWarranty")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("Length of Warranty");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<string>("TypeOfWarranty")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Type of Warranty");

                    b.Property<DateOnly?>("WarrantyExpiryDate")
                        .HasColumnType("date")
                        .HasColumnName("Warranty Expiry Date");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "DeviceId" }, "warranty_ibfk_1");

                    b.ToTable("warranty", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DeviceId = 1,
                            LengthOfWarranty = "3 Years",
                            Notes = "NA",
                            TypeOfWarranty = "Next Buisness Day"
                        },
                        new
                        {
                            Id = 2,
                            DeviceId = 9,
                            LengthOfWarranty = "3 Year",
                            Notes = "NA",
                            TypeOfWarranty = "Pro Support for IT & NDB On-site"
                        },
                        new
                        {
                            Id = 3,
                            DeviceId = 10,
                            LengthOfWarranty = "1 Year",
                            Notes = "NA",
                            TypeOfWarranty = "Limited",
                            WarrantyExpiryDate = new DateOnly(2012, 3, 1)
                        },
                        new
                        {
                            Id = 4,
                            DeviceId = 11,
                            LengthOfWarranty = "3 Year",
                            Notes = "NA",
                            TypeOfWarranty = "Limited",
                            WarrantyExpiryDate = new DateOnly(2014, 11, 1)
                        },
                        new
                        {
                            Id = 5,
                            DeviceId = 12,
                            LengthOfWarranty = "3 Year",
                            Notes = "NA",
                            TypeOfWarranty = "Limited",
                            WarrantyExpiryDate = new DateOnly(2014, 11, 1)
                        },
                        new
                        {
                            Id = 6,
                            DeviceId = 13,
                            LengthOfWarranty = "3 Year",
                            Notes = "NA",
                            TypeOfWarranty = "Limited",
                            WarrantyExpiryDate = new DateOnly(2014, 11, 1)
                        },
                        new
                        {
                            Id = 7,
                            DeviceId = 14,
                            LengthOfWarranty = "3 Year",
                            Notes = "NA",
                            TypeOfWarranty = "Limited",
                            WarrantyExpiryDate = new DateOnly(2014, 11, 1)
                        },
                        new
                        {
                            Id = 8,
                            DeviceId = 15,
                            LengthOfWarranty = "3 Year",
                            Notes = "NA",
                            TypeOfWarranty = "Limited",
                            WarrantyExpiryDate = new DateOnly(2014, 11, 1)
                        },
                        new
                        {
                            Id = 9,
                            DeviceId = 16,
                            LengthOfWarranty = "3 Year",
                            Notes = "NA",
                            TypeOfWarranty = "Limited",
                            WarrantyExpiryDate = new DateOnly(2015, 5, 1)
                        });
                });

            modelBuilder.Entity("TownOfStettler.Models.DeviceInformation", b =>
                {
                    b.HasOne("TownOfStettler.Models.HardwareDevice", "DeviceType")
                        .WithMany("DeviceInformations")
                        .HasForeignKey("DeviceTypeId")
                        .IsRequired()
                        .HasConstraintName("device information_ibfk_1");

                    b.HasOne("TownOfStettler.Models.OwnerLocation", "OwnerLocationNavigation")
                        .WithMany("DeviceInformations")
                        .HasForeignKey("OwnerLocation")
                        .IsRequired()
                        .HasConstraintName("device information_ibfk_2");

                    b.Navigation("DeviceType");

                    b.Navigation("OwnerLocationNavigation");
                });

            modelBuilder.Entity("TownOfStettler.Models.DisplayMonitor", b =>
                {
                    b.HasOne("TownOfStettler.Models.History", "HistoryNavigation")
                        .WithMany("DisplayMonitors")
                        .HasForeignKey("History")
                        .HasConstraintName("display monitors_ibfk_2");

                    b.Navigation("HistoryNavigation");
                });

            modelBuilder.Entity("TownOfStettler.Models.EthernetNetwork", b =>
                {
                    b.HasOne("TownOfStettler.Models.DeviceInformation", "Device")
                        .WithMany("EthernetNetworks")
                        .HasForeignKey("DeviceId")
                        .IsRequired()
                        .HasConstraintName("ethernet/network_ibfk_1");

                    b.Navigation("Device");
                });

            modelBuilder.Entity("TownOfStettler.Models.HardDrive", b =>
                {
                    b.HasOne("TownOfStettler.Models.DeviceInformation", "Device")
                        .WithMany("HardDrives")
                        .HasForeignKey("DeviceId")
                        .IsRequired()
                        .HasConstraintName("hard drive_ibfk_1");

                    b.Navigation("Device");
                });

            modelBuilder.Entity("TownOfStettler.Models.History", b =>
                {
                    b.HasOne("TownOfStettler.Models.DeviceInformation", "Device")
                        .WithMany("Histories")
                        .HasForeignKey("DeviceId")
                        .HasConstraintName("history_ibfk_1");

                    b.HasOne("TownOfStettler.Models.HardwareDevice", "DeviceType")
                        .WithMany("Histories")
                        .HasForeignKey("DeviceTypeId")
                        .IsRequired()
                        .HasConstraintName("history_ibfk_4");

                    b.HasOne("TownOfStettler.Models.Modification", "PartsChangedNavigation")
                        .WithMany("Histories")
                        .HasForeignKey("PartsChanged")
                        .HasConstraintName("history_ibfk_3");

                    b.HasOne("TownOfStettler.Models.OwnerLocation", "PastOwnerSNavigation")
                        .WithMany("Histories")
                        .HasForeignKey("PastOwnerS")
                        .HasConstraintName("history_ibfk_2");

                    b.Navigation("Device");

                    b.Navigation("DeviceType");

                    b.Navigation("PartsChangedNavigation");

                    b.Navigation("PastOwnerSNavigation");
                });

            modelBuilder.Entity("TownOfStettler.Models.InstalledSoftware", b =>
                {
                    b.HasOne("TownOfStettler.Models.DeviceInformation", "Device")
                        .WithMany("InstalledSoftwares")
                        .HasForeignKey("DeviceId")
                        .IsRequired()
                        .HasConstraintName("installed software_ibfk_1");

                    b.HasOne("TownOfStettler.Models.Software", "Software")
                        .WithMany("InstalledSoftwares")
                        .HasForeignKey("SoftwareId")
                        .IsRequired()
                        .HasConstraintName("installed software_ibfk_2");

                    b.Navigation("Device");

                    b.Navigation("Software");
                });

            modelBuilder.Entity("TownOfStettler.Models.InuseMonitor", b =>
                {
                    b.HasOne("TownOfStettler.Models.DeviceInformation", "Device")
                        .WithMany("InuseMonitors")
                        .HasForeignKey("DeviceId")
                        .IsRequired()
                        .HasConstraintName("inuse monitors_ibfk_1");

                    b.HasOne("TownOfStettler.Models.DisplayMonitor", "Monitor")
                        .WithMany("InuseMonitors")
                        .HasForeignKey("MonitorId")
                        .IsRequired()
                        .HasConstraintName("inuse monitors_ibfk_2");

                    b.Navigation("Device");

                    b.Navigation("Monitor");
                });

            modelBuilder.Entity("TownOfStettler.Models.Modification", b =>
                {
                    b.HasOne("TownOfStettler.Models.HardDrive", "HardDrive")
                        .WithMany("Modifications")
                        .HasForeignKey("HardDriveId")
                        .HasConstraintName("modifications_ibfk_1");

                    b.HasOne("TownOfStettler.Models.Processor", "Processor")
                        .WithMany("Modifications")
                        .HasForeignKey("ProcessorId")
                        .HasConstraintName("modifications_ibfk_2");

                    b.HasOne("TownOfStettler.Models.Ram", "Ram")
                        .WithMany("Modifications")
                        .HasForeignKey("RamId")
                        .HasConstraintName("modifications_ibfk_3");

                    b.HasOne("TownOfStettler.Models.miscellaneousDrive", "miscellaneousDrive")
                        .WithMany("Modifications")
                        .HasForeignKey("miscellaneousDriveId")
                        .HasConstraintName("modifications_ibfk_4");

                    b.HasOne("TownOfStettler.Models.SoundCard", "SoundCard")
                        .WithMany("Modifications")
                        .HasForeignKey("SoundCardId")
                        .HasConstraintName("modifications_ibfk_5");

                    b.HasOne("TownOfStettler.Models.VideoCard", "VideoCard")
                        .WithMany("Modifications")
                        .HasForeignKey("VideoCardId")
                        .HasConstraintName("modifications_ibfk_6");

                    b.Navigation("HardDrive");

                    b.Navigation("Processor");

                    b.Navigation("Ram");

                    b.Navigation("miscellaneousDrive");

                    b.Navigation("SoundCard");

                    b.Navigation("VideoCard");
                });

            modelBuilder.Entity("TownOfStettler.Models.OtherHardware", b =>
                {
                    b.HasOne("TownOfStettler.Models.History", "HistoryNavigation")
                        .WithMany("OtherHardwares")
                        .HasForeignKey("History")
                        .HasConstraintName("other hardware_ibfk_2");

                    b.HasOne("TownOfStettler.Models.OwnerLocation", "OwnerLocationNavigation")
                        .WithMany("OtherHardwares")
                        .HasForeignKey("OwnerLocation")
                        .IsRequired()
                        .HasConstraintName("other hardware_ibfk_1");

                    b.Navigation("HistoryNavigation");

                    b.Navigation("OwnerLocationNavigation");
                });

            modelBuilder.Entity("TownOfStettler.Models.Output", b =>
                {
                    b.HasOne("TownOfStettler.Models.VideoCard", "VideoCard")
                        .WithMany("Outputs")
                        .HasForeignKey("VideoCardId")
                        .IsRequired()
                        .HasConstraintName("outputs_ibfk_1");

                    b.Navigation("VideoCard");
                });

            modelBuilder.Entity("TownOfStettler.Models.Part", b =>
                {
                    b.HasOne("TownOfStettler.Models.History", "DeviceHistory")
                        .WithMany("Parts")
                        .HasForeignKey("DeviceHistoryId")
                        .IsRequired()
                        .HasConstraintName("parts_ibfk_7");

                    b.HasOne("TownOfStettler.Models.HardDrive", "HardDrive")
                        .WithMany("Parts")
                        .HasForeignKey("HardDriveId")
                        .HasConstraintName("parts_ibfk_2");

                    b.HasOne("TownOfStettler.Models.DeviceInformation", "OriginalDevice")
                        .WithMany("Parts")
                        .HasForeignKey("OriginalDeviceId")
                        .IsRequired()
                        .HasConstraintName("parts_ibfk_8");

                    b.HasOne("TownOfStettler.Models.Ram", "Ram")
                        .WithMany("Parts")
                        .HasForeignKey("RamId")
                        .HasConstraintName("parts_ibfk_3");

                    b.HasOne("TownOfStettler.Models.miscellaneousDrive", "miscellaneousDrive")
                        .WithMany("Parts")
                        .HasForeignKey("miscellaneousDriveId")
                        .HasConstraintName("parts_ibfk_4");

                    b.HasOne("TownOfStettler.Models.SoundCard", "SoundCard")
                        .WithMany("Parts")
                        .HasForeignKey("SoundCardId")
                        .HasConstraintName("parts_ibfk_5");

                    b.HasOne("TownOfStettler.Models.VideoCard", "VideoCard")
                        .WithMany("Parts")
                        .HasForeignKey("VideoCardId")
                        .HasConstraintName("parts_ibfk_6");

                    b.Navigation("DeviceHistory");

                    b.Navigation("HardDrive");

                    b.Navigation("OriginalDevice");

                    b.Navigation("Ram");

                    b.Navigation("miscellaneousDrive");

                    b.Navigation("SoundCard");

                    b.Navigation("VideoCard");
                });

            modelBuilder.Entity("TownOfStettler.Models.Printer", b =>
                {
                    b.HasOne("TownOfStettler.Models.DeviceInformation", "Device")
                        .WithMany("Printers")
                        .HasForeignKey("DeviceId")
                        .HasConstraintName("printers_ibfk_1");

                    b.HasOne("TownOfStettler.Models.History", "HistoryNavigation")
                        .WithMany("Printers")
                        .HasForeignKey("History")
                        .HasConstraintName("printers_ibfk_3");

                    b.HasOne("TownOfStettler.Models.OwnerLocation", "OwnerLocationNavigation")
                        .WithMany("Printers")
                        .HasForeignKey("OwnerLocation")
                        .IsRequired()
                        .HasConstraintName("printers_ibfk_2");

                    b.Navigation("Device");

                    b.Navigation("HistoryNavigation");

                    b.Navigation("OwnerLocationNavigation");
                });

            modelBuilder.Entity("TownOfStettler.Models.Processor", b =>
                {
                    b.HasOne("TownOfStettler.Models.DeviceInformation", "Device")
                        .WithMany("Processors")
                        .HasForeignKey("DeviceId")
                        .IsRequired()
                        .HasConstraintName("processor_ibfk_1");

                    b.Navigation("Device");
                });

            modelBuilder.Entity("TownOfStettler.Models.Ram", b =>
                {
                    b.HasOne("TownOfStettler.Models.DeviceInformation", "Device")
                        .WithMany("Rams")
                        .HasForeignKey("DeviceId")
                        .IsRequired()
                        .HasConstraintName("ram_ibfk_1");

                    b.Navigation("Device");
                });

            modelBuilder.Entity("TownOfStettler.Models.miscellaneousDrive", b =>
                {
                    b.HasOne("TownOfStettler.Models.DeviceInformation", "Device")
                        .WithMany("miscellaneousDrives")
                        .HasForeignKey("DeviceId")
                        .IsRequired()
                        .HasConstraintName("miscellaneous drives_ibfk_1");

                    b.Navigation("Device");
                });

            modelBuilder.Entity("TownOfStettler.Models.SoundCard", b =>
                {
                    b.HasOne("TownOfStettler.Models.DeviceInformation", "Device")
                        .WithMany("SoundCards")
                        .HasForeignKey("DeviceId")
                        .IsRequired()
                        .HasConstraintName("sound card_ibfk_1");

                    b.Navigation("Device");
                });

            modelBuilder.Entity("TownOfStettler.Models.VideoCard", b =>
                {
                    b.HasOne("TownOfStettler.Models.DeviceInformation", "Device")
                        .WithMany("VideoCards")
                        .HasForeignKey("DeviceId")
                        .IsRequired()
                        .HasConstraintName("video card_ibfk_1");

                    b.Navigation("Device");
                });

            modelBuilder.Entity("TownOfStettler.Models.Warranty", b =>
                {
                    b.HasOne("TownOfStettler.Models.DeviceInformation", "Device")
                        .WithMany("Warranties")
                        .HasForeignKey("DeviceId")
                        .IsRequired()
                        .HasConstraintName("warranty_ibfk_1");

                    b.Navigation("Device");
                });

            modelBuilder.Entity("TownOfStettler.Models.DeviceInformation", b =>
                {
                    b.Navigation("EthernetNetworks");

                    b.Navigation("HardDrives");

                    b.Navigation("Histories");

                    b.Navigation("InstalledSoftwares");

                    b.Navigation("InuseMonitors");

                    b.Navigation("Parts");

                    b.Navigation("Printers");

                    b.Navigation("Processors");

                    b.Navigation("Rams");

                    b.Navigation("miscellaneousDrives");

                    b.Navigation("SoundCards");

                    b.Navigation("VideoCards");

                    b.Navigation("Warranties");
                });

            modelBuilder.Entity("TownOfStettler.Models.DisplayMonitor", b =>
                {
                    b.Navigation("InuseMonitors");
                });

            modelBuilder.Entity("TownOfStettler.Models.HardDrive", b =>
                {
                    b.Navigation("Modifications");

                    b.Navigation("Parts");
                });

            modelBuilder.Entity("TownOfStettler.Models.HardwareDevice", b =>
                {
                    b.Navigation("DeviceInformations");

                    b.Navigation("Histories");
                });

            modelBuilder.Entity("TownOfStettler.Models.History", b =>
                {
                    b.Navigation("DisplayMonitors");

                    b.Navigation("OtherHardwares");

                    b.Navigation("Parts");

                    b.Navigation("Printers");
                });

            modelBuilder.Entity("TownOfStettler.Models.Modification", b =>
                {
                    b.Navigation("Histories");
                });

            modelBuilder.Entity("TownOfStettler.Models.OwnerLocation", b =>
                {
                    b.Navigation("DeviceInformations");

                    b.Navigation("Histories");

                    b.Navigation("OtherHardwares");

                    b.Navigation("Printers");
                });

            modelBuilder.Entity("TownOfStettler.Models.Processor", b =>
                {
                    b.Navigation("Modifications");
                });

            modelBuilder.Entity("TownOfStettler.Models.Ram", b =>
                {
                    b.Navigation("Modifications");

                    b.Navigation("Parts");
                });

            modelBuilder.Entity("TownOfStettler.Models.miscellaneousDrive", b =>
                {
                    b.Navigation("Modifications");

                    b.Navigation("Parts");
                });

            modelBuilder.Entity("TownOfStettler.Models.Software", b =>
                {
                    b.Navigation("InstalledSoftwares");
                });

            modelBuilder.Entity("TownOfStettler.Models.SoundCard", b =>
                {
                    b.Navigation("Modifications");

                    b.Navigation("Parts");
                });

            modelBuilder.Entity("TownOfStettler.Models.VideoCard", b =>
                {
                    b.Navigation("Modifications");

                    b.Navigation("Outputs");

                    b.Navigation("Parts");
                });
#pragma warning restore 612, 618
        }
    }
}
